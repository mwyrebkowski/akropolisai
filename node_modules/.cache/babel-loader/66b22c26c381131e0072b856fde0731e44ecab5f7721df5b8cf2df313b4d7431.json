{"ast":null,"code":"var _jsxFileName = \"/Users/michalwyrebkowski/Desktop/akropolisai/src/contexts/LanguageContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext();\nexport const useLanguage = () => {\n  _s();\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n_s(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s2();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [language, setLanguage] = useState('pl');\n\n  // Determine language from URL\n  useEffect(() => {\n    const path = location.pathname;\n    if (path.startsWith('/en')) {\n      setLanguage('en');\n    } else {\n      setLanguage('pl');\n    }\n  }, [location.pathname]);\n  const toggleLanguage = () => {\n    if (language === 'pl') {\n      navigate('/en');\n    } else {\n      navigate('/');\n    }\n  };\n  const setLanguageAndNavigate = newLanguage => {\n    if (newLanguage === 'en') {\n      navigate('/en');\n    } else {\n      navigate('/');\n    }\n  };\n  const value = {\n    language,\n    setLanguage: setLanguageAndNavigate,\n    toggleLanguage\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s2(LanguageProvider, \"C0UrnfO/mCsTpOT7AIBaHiDCUyE=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = LanguageProvider;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useLocation","useNavigate","jsxDEV","_jsxDEV","LanguageContext","useLanguage","_s","context","Error","LanguageProvider","children","_s2","location","navigate","language","setLanguage","path","pathname","startsWith","toggleLanguage","setLanguageAndNavigate","newLanguage","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/michalwyrebkowski/Desktop/akropolisai/src/contexts/LanguageContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst LanguageContext = createContext();\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n\nexport const LanguageProvider = ({ children }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [language, setLanguage] = useState('pl');\n\n  // Determine language from URL\n  useEffect(() => {\n    const path = location.pathname;\n    if (path.startsWith('/en')) {\n      setLanguage('en');\n    } else {\n      setLanguage('pl');\n    }\n  }, [location.pathname]);\n\n  const toggleLanguage = () => {\n    if (language === 'pl') {\n      navigate('/en');\n    } else {\n      navigate('/');\n    }\n  };\n\n  const setLanguageAndNavigate = (newLanguage) => {\n    if (newLanguage === 'en') {\n      navigate('/en');\n    } else {\n      navigate('/');\n    }\n  };\n\n  const value = {\n    language,\n    setLanguage: setLanguageAndNavigate,\n    toggleLanguage\n  };\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,eAAe,gBAAGR,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMS,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,OAAO,GAAGV,UAAU,CAACO,eAAe,CAAC;EAC3C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,WAAW;AAQxB,OAAO,MAAMI,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAMa,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACAD,SAAS,CAAC,MAAM;IACd,MAAMkB,IAAI,GAAGJ,QAAQ,CAACK,QAAQ;IAC9B,IAAID,IAAI,CAACE,UAAU,CAAC,KAAK,CAAC,EAAE;MAC1BH,WAAW,CAAC,IAAI,CAAC;IACnB,CAAC,MAAM;MACLA,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,CAACH,QAAQ,CAACK,QAAQ,CAAC,CAAC;EAEvB,MAAME,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIL,QAAQ,KAAK,IAAI,EAAE;MACrBD,QAAQ,CAAC,KAAK,CAAC;IACjB,CAAC,MAAM;MACLA,QAAQ,CAAC,GAAG,CAAC;IACf;EACF,CAAC;EAED,MAAMO,sBAAsB,GAAIC,WAAW,IAAK;IAC9C,IAAIA,WAAW,KAAK,IAAI,EAAE;MACxBR,QAAQ,CAAC,KAAK,CAAC;IACjB,CAAC,MAAM;MACLA,QAAQ,CAAC,GAAG,CAAC;IACf;EACF,CAAC;EAED,MAAMS,KAAK,GAAG;IACZR,QAAQ;IACRC,WAAW,EAAEK,sBAAsB;IACnCD;EACF,CAAC;EAED,oBACEhB,OAAA,CAACC,eAAe,CAACmB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAZ,QAAA,EACpCA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAAChB,GAAA,CA1CWF,gBAAgB;EAAA,QACVT,WAAW,EACXC,WAAW;AAAA;AAAA2B,EAAA,GAFjBnB,gBAAgB;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}